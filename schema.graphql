input AddToAuthorOnCommentAuthorInput {
  commentsCommentId: ID!
  authorAuthorId: ID!
  clientMutationId: String!
}

type AddToAuthorOnCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  authorAuthor: Author
  commentsComment: Comment
  authorAuthorEdge: AuthorEdge
  commentsCommentEdge: CommentEdge
}

type AddToCommentOnPostPayload {
  viewer: Viewer!
  clientMutationId: String!
  postPost: Post
  commentsComment: Comment
  postPostEdge: PostEdge
  commentsCommentEdge: CommentEdge
}

input AddToCommentOnPostPostInput {
  commentsCommentId: ID!
  postPostId: ID!
  clientMutationId: String!
}

input AddToPostOnAuthorAuthorInput {
  postsPostId: ID!
  authorAuthorId: ID!
  clientMutationId: String!
}

type AddToPostOnAuthorPayload {
  viewer: Viewer!
  clientMutationId: String!
  authorAuthor: Author
  postsPost: Post
  authorAuthorEdge: AuthorEdge
  postsPostEdge: PostEdge
}

type Author implements Node {
  comments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  posts(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection
  updatedAt: DateTime!
}

input AuthorcommentsComment {
  text: String!
  postId: ID
  post: AuthorcommentsCommentpostPost
}

input AuthorcommentsCommentpostPost {
  body: String!
  title: String!
  authorId: ID
  author: AuthorcommentsCommentpostPostauthorAuthor
  commentsIds: [ID!]
  comments: [AuthorcommentsCommentpostPostcommentsComment!]
}

input AuthorcommentsCommentpostPostauthorAuthor {
  email: String!
  name: String!
  commentsIds: [ID!]
  postsIds: [ID!]
}

input AuthorcommentsCommentpostPostcommentsComment {
  text: String!
  authorId: ID
  postId: ID
}

# A connection to a list of items.
type AuthorConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AuthorEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type AuthorEdge {
  # The item at the end of the edge.
  node: Author!

  # A cursor for use in pagination.
  cursor: String!
}

input AuthorFilter {
  AND: [AuthorFilter!]
  OR: [AuthorFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  comments_every: CommentFilter
  comments_some: CommentFilter
  comments_none: CommentFilter
  posts_every: PostFilter
  posts_some: PostFilter
  posts_none: PostFilter
}

enum AuthorOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AuthorpostsPost {
  body: String!
  title: String!
  commentsIds: [ID!]
  comments: [AuthorpostsPostcommentsComment!]
}

input AuthorpostsPostcommentsComment {
  text: String!
  authorId: ID
  author: AuthorpostsPostcommentsCommentauthorAuthor
}

input AuthorpostsPostcommentsCommentauthorAuthor {
  email: String!
  name: String!
  commentsIds: [ID!]
  postsIds: [ID!]
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

# The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
scalar BigInt

type Comment implements Node {
  author(filter: AuthorFilter): Author
  createdAt: DateTime!
  id: ID!
  post(filter: PostFilter): Post
  text: String!
  updatedAt: DateTime!
}

input CommentauthorAuthor {
  email: String!
  name: String!
  commentsIds: [ID!]
  comments: [CommentauthorAuthorcommentsComment!]
  postsIds: [ID!]
  posts: [CommentauthorAuthorpostsPost!]
}

input CommentauthorAuthorcommentsComment {
  text: String!
  postId: ID
  post: CommentauthorAuthorcommentsCommentpostPost
}

input CommentauthorAuthorcommentsCommentpostPost {
  body: String!
  title: String!
  authorId: ID
  commentsIds: [ID!]
}

input CommentauthorAuthorpostsPost {
  body: String!
  title: String!
  commentsIds: [ID!]
  comments: [CommentauthorAuthorpostsPostcommentsComment!]
}

input CommentauthorAuthorpostsPostcommentsComment {
  text: String!
  authorId: ID
  postId: ID
}

# A connection to a list of items.
type CommentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommentEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type CommentEdge {
  # The item at the end of the edge.
  node: Comment!

  # A cursor for use in pagination.
  cursor: String!
}

input CommentFilter {
  AND: [CommentFilter!]
  OR: [CommentFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: AuthorFilter
  post: PostFilter
}

enum CommentOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CommentpostPost {
  body: String!
  title: String!
  authorId: ID
  author: CommentpostPostauthorAuthor
  commentsIds: [ID!]
  comments: [CommentpostPostcommentsComment!]
}

input CommentpostPostauthorAuthor {
  email: String!
  name: String!
  commentsIds: [ID!]
  comments: [CommentpostPostauthorAuthorcommentsComment!]
  postsIds: [ID!]
  posts: [CommentpostPostauthorAuthorpostsPost!]
}

input CommentpostPostauthorAuthorcommentsComment {
  text: String!
  authorId: ID
  postId: ID
}

input CommentpostPostauthorAuthorpostsPost {
  body: String!
  title: String!
  authorId: ID
  commentsIds: [ID!]
}

input CommentpostPostcommentsComment {
  text: String!
  authorId: ID
  author: CommentpostPostcommentsCommentauthorAuthor
}

input CommentpostPostcommentsCommentauthorAuthor {
  email: String!
  name: String!
  commentsIds: [ID!]
  postsIds: [ID!]
}

input CreateAuthor {
  email: String!
  name: String!
  commentsIds: [ID!]
  comments: [AuthorcommentsComment!]
  postsIds: [ID!]
  posts: [AuthorpostsPost!]
}

input CreateAuthorInput {
  email: String!
  name: String!
  commentsIds: [ID!]
  comments: [AuthorcommentsComment!]
  postsIds: [ID!]
  posts: [AuthorpostsPost!]
  clientMutationId: String!
}

type CreateAuthorPayload {
  viewer: Viewer!
  clientMutationId: String!
  author: Author
  edge: AuthorEdge
}

input CreateComment {
  text: String!
  authorId: ID
  author: CommentauthorAuthor
  postId: ID
  post: CommentpostPost
}

input CreateCommentInput {
  text: String!
  authorId: ID
  author: CommentauthorAuthor
  postId: ID
  post: CommentpostPost
  clientMutationId: String!
}

type CreateCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  comment: Comment
  edge: CommentEdge
  author: Author
  post: Post
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreatePost {
  body: String!
  title: String!
  authorId: ID
  author: PostauthorAuthor
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
}

input CreatePostInput {
  body: String!
  title: String!
  authorId: ID
  author: PostauthorAuthor
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
  clientMutationId: String!
}

type CreatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
  author: Author
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

input DeleteAuthorInput {
  id: ID!
  clientMutationId: String!
}

type DeleteAuthorPayload {
  viewer: Viewer!
  clientMutationId: String!
  author: Author
  edge: AuthorEdge
  deletedId: ID
}

input DeleteCommentInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  comment: Comment
  edge: CommentEdge
  author: Author
  post: Post
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeletePostInput {
  id: ID!
  clientMutationId: String!
}

type DeletePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
  author: Author
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  AND: [FileFilter!]
  OR: [FileFilter!]
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  createAuthor(input: CreateAuthorInput!): CreateAuthorPayload
  createComment(input: CreateCommentInput!): CreateCommentPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createPost(input: CreatePostInput!): CreatePostPayload
  updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateAuthor(input: UpdateOrCreateAuthorInput!): UpdateOrCreateAuthorPayload
  updateOrCreateComment(input: UpdateOrCreateCommentInput!): UpdateOrCreateCommentPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreatePost(input: UpdateOrCreatePostInput!): UpdateOrCreatePostPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteAuthor(input: DeleteAuthorInput!): DeleteAuthorPayload
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deletePost(input: DeletePostInput!): DeletePostPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToAuthorOnComment(input: AddToAuthorOnCommentAuthorInput!): AddToAuthorOnCommentPayload
  addToCommentOnPost(input: AddToCommentOnPostPostInput!): AddToCommentOnPostPayload
  addToPostOnAuthor(input: AddToPostOnAuthorAuthorInput!): AddToPostOnAuthorPayload
  removeFromAuthorOnComment(input: RemoveFromAuthorOnCommentAuthorInput!): RemoveFromAuthorOnCommentPayload
  removeFromCommentOnPost(input: RemoveFromCommentOnPostPostInput!): RemoveFromCommentOnPostPayload
  removeFromPostOnAuthor(input: RemoveFromPostOnAuthorAuthorInput!): RemoveFromPostOnAuthorPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  author(filter: AuthorFilter): Author
  body: String!
  comments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input PostauthorAuthor {
  email: String!
  name: String!
  commentsIds: [ID!]
  comments: [PostauthorAuthorcommentsComment!]
  postsIds: [ID!]
  posts: [PostauthorAuthorpostsPost!]
}

input PostauthorAuthorcommentsComment {
  text: String!
  postId: ID
  post: PostauthorAuthorcommentsCommentpostPost
}

input PostauthorAuthorcommentsCommentpostPost {
  body: String!
  title: String!
  authorId: ID
  commentsIds: [ID!]
}

input PostauthorAuthorpostsPost {
  body: String!
  title: String!
  commentsIds: [ID!]
  comments: [PostauthorAuthorpostsPostcommentsComment!]
}

input PostauthorAuthorpostsPostcommentsComment {
  text: String!
  authorId: ID
  postId: ID
}

input PostcommentsComment {
  text: String!
  authorId: ID
  author: PostcommentsCommentauthorAuthor
}

input PostcommentsCommentauthorAuthor {
  email: String!
  name: String!
  commentsIds: [ID!]
  comments: [PostcommentsCommentauthorAuthorcommentsComment!]
  postsIds: [ID!]
  posts: [PostcommentsCommentauthorAuthorpostsPost!]
}

input PostcommentsCommentauthorAuthorcommentsComment {
  text: String!
  authorId: ID
  postId: ID
}

input PostcommentsCommentauthorAuthorpostsPost {
  body: String!
  title: String!
  authorId: ID
  commentsIds: [ID!]
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge.
  node: Post!

  # A cursor for use in pagination.
  cursor: String!
}

input PostFilter {
  AND: [PostFilter!]
  OR: [PostFilter!]
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: AuthorFilter
  comments_every: CommentFilter
  comments_some: CommentFilter
  comments_none: CommentFilter
}

enum PostOrderBy {
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromAuthorOnCommentAuthorInput {
  commentsCommentId: ID!
  authorAuthorId: ID!
  clientMutationId: String!
}

type RemoveFromAuthorOnCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  authorAuthor: Author
  commentsComment: Comment
  authorAuthorEdge: AuthorEdge
  commentsCommentEdge: CommentEdge
}

type RemoveFromCommentOnPostPayload {
  viewer: Viewer!
  clientMutationId: String!
  postPost: Post
  commentsComment: Comment
  postPostEdge: PostEdge
  commentsCommentEdge: CommentEdge
}

input RemoveFromCommentOnPostPostInput {
  commentsCommentId: ID!
  postPostId: ID!
  clientMutationId: String!
}

input RemoveFromPostOnAuthorAuthorInput {
  postsPostId: ID!
  authorAuthorId: ID!
  clientMutationId: String!
}

type RemoveFromPostOnAuthorPayload {
  viewer: Viewer!
  clientMutationId: String!
  authorAuthor: Author
  postsPost: Post
  authorAuthorEdge: AuthorEdge
  postsPostEdge: PostEdge
}

input SignupUserInput {
  clientMutationId: String!
}

input UpdateAuthor {
  email: String
  id: ID!
  name: String
  commentsIds: [ID!]
  comments: [AuthorcommentsComment!]
  postsIds: [ID!]
  posts: [AuthorpostsPost!]
}

input UpdateAuthorInput {
  email: String
  id: ID!
  name: String
  commentsIds: [ID!]
  comments: [AuthorcommentsComment!]
  postsIds: [ID!]
  posts: [AuthorpostsPost!]
  clientMutationId: String!
}

type UpdateAuthorPayload {
  viewer: Viewer!
  clientMutationId: String!
  author: Author
  edge: AuthorEdge
}

input UpdateComment {
  id: ID!
  text: String
  authorId: ID
  author: CommentauthorAuthor
  postId: ID
  post: CommentpostPost
}

input UpdateCommentInput {
  id: ID!
  text: String
  authorId: ID
  author: CommentauthorAuthor
  postId: ID
  post: CommentpostPost
  clientMutationId: String!
}

type UpdateCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  comment: Comment
  edge: CommentEdge
  author: Author
  post: Post
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateAuthorInput {
  update: UpdateAuthor!
  create: CreateAuthor!
  clientMutationId: String!
}

type UpdateOrCreateAuthorPayload {
  viewer: Viewer!
  clientMutationId: String!
  author: Author
  edge: AuthorEdge
}

input UpdateOrCreateCommentInput {
  update: UpdateComment!
  create: CreateComment!
  clientMutationId: String!
}

type UpdateOrCreateCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  comment: Comment
  edge: CommentEdge
  author: Author
  post: Post
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreatePostInput {
  update: UpdatePost!
  create: CreatePost!
  clientMutationId: String!
}

type UpdateOrCreatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
  author: Author
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdatePost {
  body: String
  id: ID!
  title: String
  authorId: ID
  author: PostauthorAuthor
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
}

input UpdatePostInput {
  body: String
  id: ID!
  title: String
  authorId: ID
  author: PostauthorAuthor
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
  clientMutationId: String!
}

type UpdatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
  author: Author
}

input UpdateUser {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allAuthors(filter: AuthorFilter, orderBy: AuthorOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  allComments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allPosts(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Author(id: ID): Author
  Comment(id: ID): Comment
  File(id: ID, secret: String, url: String): File
  Post(id: ID): Post
  User(id: ID): User
  id: ID!
}

